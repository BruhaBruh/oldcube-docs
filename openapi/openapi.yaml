openapi: 3.1.0
info:
  version: "0.2"
  title: OLDCUBE
  description: |
    Этот API задокументирован в **формате OpenAPI** и доступен для скачивания [здесь](/openapi.yaml).

    ## Ограничение скорости
    API имеет ограничение скорости, определенное для каждого IP-адреса. Лимиты и оставшиеся суммы указаны в заголовках ответов.
    - Заголовок «X-Ratelimit-Limit» — это максимальное количество запросов, которые можно сделать за минуту.
    - Заголовок «X-Ratelimit-Remaining» — это количество запросов, оставшихся в текущем окне ограничения скорости.
    Заголовок X-Ratelimit-Reset представляет собой время в секундах до сброса окна ограничения скорости.
    Ограничения скорости одинаковы независимо от того, используете ли вы токен или нет.
servers:
  - url: https://api.oldcube.ru/v1
    description: Production сервер
  - url: http://api.oldcube.local/v1
    description: Developer сервер

tags:
  - name: user-authorization
    x-displayName: Для пользователя
    description: Авторизация пользователя
  - name: minecraft-authorization
    x-displayName: Сервер Minecraft
    description: Авторизация пользователя для сервера Minecraft

x-tagGroups:
  - name: Authorization
    x-displayName: Авторизация
    tags:
      - user-authorization
      - minecraft-authorization

security:
  - AccessToken: []
components:
  parameters:
    Service:
      name: service
      in: query
      required: true
      description: Сервис через который нужно авторизовать пользователя
      schema:
        type: string
        enum:
          - discord
          - twitch
        example: twitch
  schemas:
    LoginAndPassword:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: Логин пользователя (ник Minecraft)
        password:
          type: string
          description: Пароль пользователя
    Error:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
  responses:
    InvalidLoginOrPassword:
      description: Неверный логин или пароль
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Invalid login or password
            status: 400
    500:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: "Internal Server Error: 732e35d6-20fd-476e-b8b3-5251d01c0851"
            status: 500
  securitySchemes:
    AccessToken:
      type: apiKey
      description: JWT токен доступа для аутентификации пользователя
      in: cookie
      name: access_token
    RefreshToken:
      type: apiKey
      description: JWT токен для обновления токенов доступа и обновления
      in: cookie
      name: refresh_token
paths:
  /auth/login:
    post:
      operationId: login
      summary: Вход через пароль
      tags:
        - user-authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginAndPassword"
            example:
              login: BruhaBruh
              password: BruhaBruhPassword
      security:
        - {}
      responses:
        308:
          description: Redirect на главную страницу и установка токенов доступа и обновления
        400:
          $ref: "#/components/responses/InvalidLoginOrPassword"
        500:
          $ref: "#/components/responses/500"
    get:
      operationId: serviceLogin
      summary: Вход через сервис
      description: Redirect на страницу авторизации через Сервис
      parameters:
        - $ref: "#/components/parameters/Service"
      tags:
        - user-authorization
      security:
        - {}
      responses:
        307:
          description: Redirect на страницу авторизации через Сервис
        500:
          $ref: "#/components/responses/500"
  /auth/twitch:
    get:
      operationId: twitchCallback
      summary: Twitch Callback
      description: Callback OAuth авторизации Twitch'а
      parameters:
        - name: code
          in: query
          description: Код для авторизации пользователя
          schema:
            type: string
        - name: scope
          in: query
          description: Права выданные на данный код
          schema:
            type: string
        - name: error
          in: query
          description: Ошибка при авторизации
          schema:
            type: string
        - name: description
          in: query
          description: Описание ошибки при авторизации
          schema:
            type: string
      tags:
        - user-authorization
      security:
        - {}
      responses:
        308:
          description: Redirect на главную страницу
        400:
          description: Неверный код
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid code
                status: 400
        401:
          description: Ошибка на стадии авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Authorization stage error
                status: 401
        500:
          $ref: "#/components/responses/500"
  /auth/discord:
    get:
      operationId: discordCallback
      summary: Discord Callback
      description: Callback OAuth авторизации Discord'а
      parameters:
        - name: code
          in: query
          required: true
          description: Код для авторизации пользователя
          schema:
            type: string
      tags:
        - user-authorization
      security:
        - {}
      responses:
        308:
          description: Redirect на главную страницу
        400:
          description: Неверный код
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid code
                status: 400
        401:
          description: Ошибка на стадии авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Authorization stage error
                status: 401
        500:
          $ref: "#/components/responses/500"
  /auth/refresh:
    post:
      operationId: refreshTokens
      summary: Обновление токенов
      description: Обновляет токены доступа и обновления
      tags:
        - user-authorization
      security:
        - RefreshToken: []
      responses:
        204:
          description: Успешно
        401:
          description: Неверный токен обновления
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid refresh token
                status: 401
        500:
          $ref: "#/components/responses/500"
  /auth/logout:
    get:
      operationId: logout
      summary: Выход из аккаунта
      description: Очистка cookie и удаление токена обновления
      security:
        - AccessToken: []
          RefreshToken: []
      tags:
        - user-authorization
      responses:
        308:
          description: Redirect на главную страницу
  /auth/minecraft:
    get:
      operationId: minecraftAuth
      summary: Авторизация входа Minecraft
      description: При входе на сервер, если у игрока не совпадает IP с последним входом, то игрок должен пройти по ссылке и авторизоваться. Если все хорошо, на сервер отправляется запрос с разрешением на вход
      parameters:
        - name: code
          in: path
          required: true
          description: |
            Специальный код, который будет **хэширован** с секретным ключом - `{code}_{secret_key}`. Хэш будет отправлен на сервер при успешной авторизации
          schema:
            type: string
            example: Aw2a82s4QFyeAQsj
        - name: id
          in: path
          required: true
          description: |
            UUID minecraft
          schema:
            type: string
            example: ee946be4-f7f4-4ecc-92cc-446fc1ed8dc8
      security:
        - AccessToken: []
      tags:
        - minecraft-authorization
      responses:
        307:
          description: Если игрок не авторизован, то происходит redirect на страницу авторизации с указанием redirect_url - та же ссылка, полученная с сервера minecraft
        308:
          description: Если все хорошо и к игроку привязан аккаунт minecraft, то происходит redirect на страницу с сообщением об успехе. Так же будет отправлен хэш на сервер minecraft, для подтверждения авторизации
