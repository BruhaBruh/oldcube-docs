openapi: 3.1.0
info:
  version: "0.2"
  title: OLDCUBE
  description: |
    Этот API задокументирован в **формате OpenAPI** и доступен для скачивания [здесь](/openapi.yaml).

    ## Ограничение скорости
    API имеет ограничение скорости, определенное для каждого IP-адреса. Лимиты и оставшиеся суммы указаны в заголовках ответов.
    - Заголовок «X-Ratelimit-Limit» — это максимальное количество запросов, которые можно сделать за минуту.
    - Заголовок «X-Ratelimit-Remaining» — это количество запросов, оставшихся в текущем окне ограничения скорости.
    Заголовок X-Ratelimit-Reset представляет собой время в секундах до сброса окна ограничения скорости.
    Ограничения скорости одинаковы независимо от того, используете ли вы токен или нет.
servers:
  - url: https://api.oldcube.ru/v1
    description: Production сервер
  - url: http://api.oldcube.local/v1
    description: Developer сервер

tags:
  - name: user-authorization
    x-displayName: Для пользователя
    description: Авторизация пользователя
  - name: minecraft-authorization
    x-displayName: Авторизация minecraft
    description: Авторизация пользователя для сервера Minecraft
  - name: connect
    x-displayName: Подключение
  - name: ban
    x-displayName: Баны
  - name: whitelist
    x-displayName: Белый список
  - name: nickname
    x-displayName: Никнейм
x-tagGroups:
  - name: Authorization
    x-displayName: Авторизация
    tags:
      - user-authorization
  - name: Connect
    x-displayName: Подключение
    tags:
      - connect
  - name: Server
    x-displayName: Сервер Minecraft
    tags:
      - minecraft-authorization
      - ban
      - whitelist
  - name: OnlyUser
    x-displayName: Личный кабинет
    tags:
      - nickname

security:
  - AccessToken: []
components:
  parameters:
    Service:
      name: service
      in: query
      required: true
      description: Сервис через который нужно авторизовать пользователя
      schema:
        type: string
        enum:
          - discord
          - twitch
        example: twitch
  schemas:
    BannedUser:
      type: object
      properties:
        id:
          type: string
          description: UUID Minecraft
        username:
          type: string
          description: Ник Minecraft
        twitch:
          type: string
          description: Twitch никнейм
        discord:
          type: string
          description: Тег Discord
        isBanned:
          type: boolean
          description: Забанен?
        reason:
          type: string
          description: Последняя/текущая причина блокировка
        expiredAt:
          type: string
          description: Дата когда закончился/закончится бан в ISO 8601
    LoginAndPassword:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: Логин пользователя (ник Minecraft)
        password:
          type: string
          description: Пароль пользователя
    Error:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
  responses:
    InvalidLoginOrPassword:
      description: Неверный логин или пароль
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Invalid login or password
            status: 400
    403:
      description: Нет доступа
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Forbidden
            status: 403
    500:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: "Internal Server Error: 732e35d6-20fd-476e-b8b3-5251d01c0851"
            status: 500
  securitySchemes:
    AccessToken:
      type: apiKey
      description: JWT токен доступа для аутентификации пользователя
      in: cookie
      name: access_token
    RefreshToken:
      type: apiKey
      description: JWT токен для обновления токенов доступа и обновления
      in: cookie
      name: refresh_token
    ServerToken:
      type: "http"
      scheme: "bearer"
      description: |
        Секретный токен использующийся для аутентификации сервера. Например: `Authorization: Bearer d2ksfHLK44SJD3HFsd5iu315saHD2`
paths:
  /auth/login:
    post:
      operationId: login
      summary: Вход через пароль
      tags:
        - user-authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginAndPassword"
            example:
              login: BruhaBruh
              password: BruhaBruhPassword
      security:
        - {}
      responses:
        308:
          description: Redirect на главную страницу и установка токенов доступа и обновления
        400:
          $ref: "#/components/responses/InvalidLoginOrPassword"
        500:
          $ref: "#/components/responses/500"
    get:
      operationId: serviceLogin
      summary: Вход через сервис
      description: Redirect на страницу авторизации через Сервис
      parameters:
        - $ref: "#/components/parameters/Service"
      tags:
        - user-authorization
      security:
        - {}
      responses:
        307:
          description: Redirect на страницу авторизации через Сервис
        400:
          description: Неверный сервис
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid service
                status: 400
        500:
          $ref: "#/components/responses/500"
  /auth/twitch:
    get:
      operationId: twitchCallback
      summary: Twitch Callback
      description: Callback OAuth авторизации Twitch'а
      parameters:
        - name: code
          in: query
          description: Код для авторизации пользователя
          schema:
            type: string
        - name: scope
          in: query
          description: Права выданные на данный код
          schema:
            type: string
        - name: error
          in: query
          description: Ошибка при авторизации
          schema:
            type: string
        - name: description
          in: query
          description: Описание ошибки при авторизации
          schema:
            type: string
      tags:
        - user-authorization
      security:
        - {}
      responses:
        308:
          description: Redirect на главную страницу
        400:
          description: Неверный код
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid code
                status: 400
        401:
          description: Ошибка на стадии авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Authorization stage error
                status: 401
        500:
          $ref: "#/components/responses/500"
  /auth/discord:
    get:
      operationId: discordCallback
      summary: Discord Callback
      description: Callback OAuth авторизации Discord'а
      parameters:
        - name: code
          in: query
          description: Код для авторизации пользователя
          schema:
            type: string
        - name: error
          in: query
          description: Ошибка при авторизации
          schema:
            type: string
        - name: error_description
          in: query
          description: Описание ошибки при авторизации
          schema:
            type: string
      tags:
        - user-authorization
      security:
        - {}
      responses:
        308:
          description: Redirect на главную страницу
        400:
          description: Неверный код
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid code
                status: 400
        401:
          description: Ошибка на стадии авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Authorization stage error
                status: 401
        500:
          $ref: "#/components/responses/500"
  /auth/refresh:
    post:
      operationId: refreshTokens
      summary: Обновление токенов
      description: Обновляет токены доступа и обновления
      tags:
        - user-authorization
      security:
        - RefreshToken: []
      responses:
        204:
          description: Успешно
        401:
          description: Неверный токен обновления
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid refresh token
                status: 401
        500:
          $ref: "#/components/responses/500"
  /auth/logout:
    get:
      operationId: logout
      summary: Выход из аккаунта
      description: Очистка cookie и удаление токена обновления
      security:
        - AccessToken: []
          RefreshToken: []
      tags:
        - user-authorization
      responses:
        308:
          description: Redirect на главную страницу
  /connect:
    get:
      operationId: serviceConnect
      summary: Подключение сервиса
      description: Redirect на страницу авторизации через Сервис
      parameters:
        - $ref: "#/components/parameters/Service"
      tags:
        - connect
      security:
        - AccessToken: []
      responses:
        307:
          description: Redirect на страницу авторизации через Сервис
        400:
          description: Неверный сервис
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid service
                status: 400
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /connect/twitch:
    get:
      operationId: twitchConnectCallback
      summary: Twitch Callback подключения
      description: Callback OAuth авторизации Twitch'а, использующийся для привязки аккаунта Twitch к текущему пользователю
      parameters:
        - name: code
          in: query
          description: Код для авторизации пользователя
          schema:
            type: string
        - name: scope
          in: query
          description: Права выданные на данный код
          schema:
            type: string
        - name: error
          in: query
          description: Ошибка при авторизации
          schema:
            type: string
        - name: description
          in: query
          description: Описание ошибки при авторизации
          schema:
            type: string
      tags:
        - connect
      security:
        - AccessToken: []
      responses:
        308:
          description: Redirect на /complete/twitch
        400:
          description: Неверный код
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid code
                status: 400
        401:
          description: Ошибка на стадии авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Authorization stage error
                status: 401
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    delete:
      operationId: twitchDelete
      summary: Удаление Twitch
      description: Используется для удаления привязанного аккаунта Twitch
      tags:
        - connect
      security:
        - AccessToken: []
      responses:
        204:
          description: Успешно удален
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /connect/discord:
    get:
      operationId: discordConnectCallback
      summary: Discord Callback подключения
      description: Callback OAuth авторизации Discord'а, использующийся для привязки аккаунта Discord к текущему пользователю
      parameters:
        - name: code
          in: query
          description: Код для авторизации пользователя
          schema:
            type: string
        - name: error
          in: query
          description: Ошибка при авторизации
          schema:
            type: string
        - name: error_description
          in: query
          description: Описание ошибки при авторизации
          schema:
            type: string
      tags:
        - connect
      security:
        - AccessToken: []
      responses:
        308:
          description: Redirect на /complete/discord
        400:
          description: Неверный код
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Invalid code
                status: 400
        401:
          description: Ошибка на стадии авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Authorization stage error
                status: 401
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    delete:
      operationId: discordDelete
      summary: Удаление Discord
      description: Используется для удаления привязанного аккаунта Discord
      tags:
        - connect
      security:
        - AccessToken: []
      responses:
        204:
          description: Успешно удален
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /auth/minecraft:
    get:
      operationId: minecraftAuth
      summary: Авторизация входа Minecraft
      description: При входе на сервер, если у игрока не совпадает IP с последним входом, то игрок должен пройти по ссылке и авторизоваться. Если все хорошо, на сервер отправляется запрос с разрешением на вход
      parameters:
        - name: code
          in: query
          required: true
          description: |
            Специальный код, который будет **хэширован** с секретным ключом используя HMACSHA256. Хэш будет отправлен на сервер при успешной авторизации
          schema:
            type: string
            example: Aw2a82s4QFyeAQsj
        - name: id
          in: query
          required: true
          description: |
            UUID minecraft
          schema:
            type: string
            example: ee946be4-f7f4-4ecc-92cc-446fc1ed8dc8
      security:
        - AccessToken: []
      tags:
        - minecraft-authorization
      responses:
        307:
          description: Если игрок не авторизован, то происходит redirect на страницу авторизации с указанием redirect_url - та же ссылка, полученная с сервера minecraft
        308:
          description: Если игрок авторизован и к игроку привязан аккаунт minecraft, то происходит redirect на страницу с сообщением об успехе. Так же будет отправлен хэш на сервер minecraft, для подтверждения авторизации. Иначе на сервер будет отправлен полученный uuid, а так же будет redirect на страницу с сообщением об ошибке привязки аккаунта
  /ban:
    get:
      operationId: isBanned
      summary: Проверка бана
      description: Проверяет выдан ли бан. Используя AccessToken будет информация текущего пользователя
      parameters:
        - name: username
          in: query
          schema:
            type: string
            description: Ник Minecraft
        - name: uuid
          in: query
          schema:
            type: string
            description: UUID Minecraft
        - name: discord
          in: query
          schema:
            type: string
            description: |
              Discord тег. Например: `BruhaBruh#0000`
        - name: twitch
          in: query
          schema:
            type: string
            description: Twitch никнейм. Регистр не важен
      tags:
        - ban
      security:
        - ServerToken: []
        - AccessToken: []
      responses:
        200:
          description: Успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannedUser"
              example:
                id: 2cd21400-ffd1-4057-9bb7-ae81375220f6
                username: BruhaBruh
                twitch: BruhaBruh
                discord: BruhaBruh#0000
                isBanned: false
                banReason: Хубабуба
                banExpiredAt: 2022-05-18T11:09:01.080Z
        400:
          description: Не указана цель. Только для ServerToken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Bad Request
                status: 400
        403:
          $ref: "#/components/responses/403"
        404:
          description: Игрок не найден. Только для ServerToken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Not Found
                status: 404
        500:
          $ref: "#/components/responses/500"
    post:
      operationId: banUser
      summary: Выдача бана
      description: Выдает бан по нику, uuid, тегу Discord или нику Twitch, так же может быть использован для уменьшения срока бана вплоть до разбана, нужно просто указать прошедшую временную метку
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Ник Minecraft
                uuid:
                  type: string
                  description: UUID Minecraft
                discord:
                  type: string
                  description: |
                    Discord тег. Например: `BruhaBruh#0000`
                twitch:
                  type: string
                  description: Twitch никнейм. Регистр не важен
                banReason:
                  type: string
                  description: Причина блокировки. **Макс. 64 символа**
                banExpiredAt:
                  type: string
                  description: |
                    Дата окончания бата в [ISO 8601](https://ru.wikipedia.org/wiki/ISO_8601). Например: `2022-05-18T11:09:01.080Z`
              required:
                - reason
                - banExpiredAt
            example:
              id: 2cd21400-ffd1-4057-9bb7-ae81375220f6
              banReason: Хубабуба
              banExpiredAt: 2022-05-18T11:09:01.080Z
      tags:
        - ban
      security:
        - ServerToken: []
      responses:
        200:
          description: Успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannedUser"
              example:
                id: 2cd21400-ffd1-4057-9bb7-ae81375220f6
                username: BruhaBruh
                twitch: BruhaBruh
                discord: BruhaBruh#0000
                isBanned: false
                banReason: Хубабуба
                banExpiredAt: 2022-05-18T11:09:01.080Z
        400:
          description: Не указана цель
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Bad Request
                status: 400
        403:
          $ref: "#/components/responses/403"
        404:
          description: Игрок не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Not Found
                status: 404
        500:
          $ref: "#/components/responses/500"
  /whitelist:
    get:
      operationId: isWhitelisted
      summary: Проверка Whitelist
      description: Проверяет есть ли пользователь в белом списке. Используя AccessToken будет информация текущего пользователя
      parameters:
        - name: username
          in: query
          schema:
            type: string
            description: Ник Minecraft
        - name: uuid
          in: query
          schema:
            type: string
            description: UUID Minecraft
        - name: discord
          in: query
          schema:
            type: string
            description: |
              Discord тег. Например: `BruhaBruh#0000`
        - name: twitch
          in: query
          schema:
            type: string
            description: Twitch никнейм. Регистр не важен
      tags:
        - whitelist
      security:
        - ServerToken: []
        - AccessToken: []
      responses:
        200:
          description: Успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  isWhitelisted:
                    type: boolean
                    description: Есть в белом списке?
              example:
                isWhitelisted: true
        400:
          description: Не указана цель. Только для ServerToken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Bad Request
                status: 400
        403:
          $ref: "#/components/responses/403"
        404:
          description: Игрок не найден. Только для ServerToken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Not Found
                status: 404
        500:
          $ref: "#/components/responses/500"
    post:
      operationId: whitelistUser
      summary: Внесение/Удаление в белый список
      description: Вносит в белый список или удаляет по нику, uuid, тегу Discord или нику Twitch
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isWhitelisted:
                  type: boolean
                  description: В белый список?
                username:
                  type: string
                  description: Ник Minecraft
                uuid:
                  type: string
                  description: UUID Minecraft
                discord:
                  type: string
                  description: |
                    Discord тег. Например: `BruhaBruh#0000`
                twitch:
                  type: string
                  description: Twitch никнейм. Регистр не важен
              required:
                - isWhitelisted
            example:
              isWhitelisted: true
              username: BruhaBruh
      tags:
        - whitelist
      security:
        - ServerToken: []
      responses:
        204:
          description: Успешно
        400:
          description: Не указана цель
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Bad Request
                status: 400
        403:
          $ref: "#/components/responses/403"
        404:
          description: Игрок не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Not Found
                status: 404
        500:
          $ref: "#/components/responses/500"
  /nickname:
    get:
      operationId: getNickname
      summary: Текущий ник
      description: Возвращает текущий никнейм Minecraft
      tags:
        - nickname
      security:
        - AccessToken: []
      responses:
        200:
          description: Успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: Minecraft nickname
              example:
                username: BruhaBruh
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    post:
      operationId: setNickname
      summary: Установка ника
      description: Установка никнейма Minecraft c генерацией Offline UUID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Новый никнейм
              required:
                - username
            example:
              username: BruhaBruh
      tags:
        - nickname
      security:
        - AccessToken: []
      responses:
        200:
          description: Успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: UUID Minecraft
                  username:
                    type: string
                    description: Minecraft nickname
              example:
                id: 6ba421df-1e16-3f36-bcba-9b70b566a713
                username: BruhaBruh
        400:
          description: Ник занят
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Nickname already taken
                status: 400
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
